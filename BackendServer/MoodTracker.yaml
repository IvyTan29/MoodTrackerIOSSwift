openapi: "3.0.2"
info:
  title: Mood Tracker
  version: "1.0"
servers:
  - url: https://api.server.test/v1
    description: Development Server

paths:
  /user/login:
    post:
      tags:
        - Users
      summary: Login User
      description: User Logs In by User ID
      operationId: userLoginV1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - password
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
        required: true
      responses:
        #best to return an object that includes the status - integer
        200:
          description: User has logged in
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/User"

  /user:
    post:
      tags:
        - Users
      summary: New User
      description: Create a new user
      operationId: createUserV1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        201:
          description: User created
          content:
            application/json: 
              schema: 
                $ref: "#/components/schemas/User"
        404:
          description: Bad Request

  /user/{userId}:
    get:
      summary: Get User
      description: Get **single** User by Id
      tags:
        - Users
      operationId: getSingleUserV1
      parameters:
        - name: includeEntries
          in: query
          schema: 
            type: number 
            format: int32
            enum: 
              - 0
              - 1 
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        200:
          description: Found User
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: Not Found
    put:
      tags:
        - Users
      summary: Update User
      description: Update User By Id
      operationId: updateUserV1
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        200:
          description: User Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        500:
          description: Internal server error

    delete:
      tags:
        - Users
      summary: Delete User
      description: Delete User By ID
      operationId: deleteUserV1
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        200:
          description: User Deleted
        500:
          description: Internal server error - unable to delete user

  /user/{userId}/entries:
    get:
      summary: Get Entries
      description: Get All Entries by User Id
      operationId: getEntriesV1
      tags:
        - Entries
      parameters:
        - name: date
          in: query
          schema: 
            type: string
            format: date-time
        # - name: dateTo
        #   in: query
        #   schema: 
        #     type: string
        #     format: date-time
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        200:
          description: Found Entry
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Entry"
        404:
          description: Entries not found

    post:
      tags:
        - Entries
      summary: New Entry
      description: Create a new entry with User Id
      operationId: addNewEntryV1
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entry"
        required: true
      responses:
        201:
          description: Entry created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
        500:
          description: Internal server error - entry creation failed - unable to create entry - unable to update entry

  /user/{userId}/entries/{entryId}:
    get:
      summary: Get Entry
      description: Get **single** Entry by User Id and Entry Id
      operationId: getOneEntryV1
      tags:
        - Entries
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/EntryIdParam"
      responses:
        200:
          description: Found Entry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
        404:
          description: Entry not found

    put:
      tags:
        - Entries
      summary: Update Entry
      description: Update Entry By User Id and Entry Id
      operationId: updateEntryV1
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/EntryIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Entry"
        required: true
      responses:
        200:
          description: Entry Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entry"
        500:
          description: Internal server error

    delete:
      summary: Delete Entry
      description: Delete Entry By User Id and Entry Id
      operationId: deleteEntryV1
      tags:
        - Entries
      parameters:
        - $ref: "#/components/parameters/EntryIdParam"
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        200:
          description: Entry Deleted
        500:
          description: Internal server error - unable to delete entry

  /user/{userId}/tags:
    get:
      summary: Get Tags
      description: Get tags
      operationId: getTagsV1
      tags:
        - Tags
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      responses:
        200:
          description: An array of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tag"
        404:
          description: Tags not found

    post:
      summary: New Tag
      description: Create a New Tag
      operationId: addNewTagV1
      tags:
        - Tags
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        201:
          description: Tag Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        400:
          description: Bad Request
        409:
          description: Conflict

  /user/{userId}/tags/{tagId}:
    get:
      summary: Get Tag
      description: Get a specific tag
      operationId: getTagV1
      tags:
        - Tags
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/TagIdParam"
      responses:
        200:
          description: Found Tag
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        404:
          description: Tag not found
        
    put:
      tags:
        - Tags
      summary: Update Tag
      description: By User Id and Tag Id
      operationId: updateTagV1
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/TagIdParam"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
        required: true
      responses:
        200:
          description: Tag Updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
        500:
          description: Internal server error

    delete:
      tags:
        - Tags
      summary: Delete Entry
      description: Delete Tag By User Id and Tag Id
      operationId: deleteTagV1
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/TagIdParam"
      responses:
        200:
          description: Tag Deleted
        500:
          description: Internal server error - unable to delete tag

  /user/{userId}/entry/{entryId}/tags:
    post:
      tags:
        - Tags
      summary: Update Tag Array In Tag, User and Entry
      description: Place tag array to tag, user and entry documents
      operationId: updateTagArrayV1
      parameters:
        - $ref: "#/components/parameters/UserIdParam"
        - $ref: "#/components/parameters/EntryIdParam"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Tag"
        required: true
      responses:
        200:
          description: Tag Array Updated
        500:
          description: Internal server error


components:
  parameters:
    UserIdParam:
      name: userId
      in: path
      required: true
      # style: simple
      # explode: false
      schema:
        type: string
        format: uuid
    EntryIdParam:
      name: entryId
      in: path
      description: Entry Id
      required: true
      # style: simple
      # explode: false
      schema:
        type: string
        format: uuid
    TagIdParam:
      name: tagId
      in: path
      description: Tag Id
      required: true
      # style: simple
      # explode: false
      schema:
        type: string
        format: uuid
  schemas:
    Name:
      type: object
      properties:
        firstName:
          maxLength: 100
          minLength: 2
          type: string
          example: Albus
        middleName:
          maxLength: 100
          minLength: 2
          type: string
          example: Brian
        lastName:
          maxLength: 100
          minLength: 2
          type: string
          example: Dumbledore

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          $ref: "#/components/schemas/Name"
        email:
          maxLength: 100
          minLength: 4
          type: string
          format: email
        password:
          maxLength: 50
          minLength: 7
          type: string
          format: password
        entries:
          type: array
          items:
            $ref: "#/components/schemas/Entry"
    Entry:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        datecreated:
          type: string
          format: date-time
          example: 2022-07-21T17:32:28Z
        dateupdated:
          type: string
          format: date-time
          example: 2022-07-21T17:32:28Z
        mood:
          type: number
          format: integer
        note:
          type: string
          maxLength: 250
          minLength: 0
          example: "This is a note"
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          minLength: 2
          maxLength: 20
        date:
          type: string
          format: date-time
        level:
          type: number
          format: double

